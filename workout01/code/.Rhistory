geom_smooth(method = "lm")
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size = 3)
ggplot(faithful, aes(x = waiting)) + geom_histogram(binwidth = 30, color = 'black')
ggplot(iris, aes(Species, Sepal.Length)) + geom_bar(stat = "identity") #default is geom_bar(stat = "bin") for counts
#Explore ddply, llply, join, melt, dcast, acast
#Faceting
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + facet_grid(Species ~.) # along columns
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + facet_wrap(~Species)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(aes(shape = Species), size = 3) +
geom_smooth(method = "loess")
these = c("Day", "Wind", "XY")
Q = names(airquality) %in% these # Returns true or false
airquality[, Q]
airquality
v1 <- c("a1","b2","c1","d2")
v2 <- c("g1","x2","d2","e2","f1","a1","c2","b2","a2")
match(v1,v2)
these = c("Day", "Wind", "XY")
Q = names(airquality) %in% these # Returns true or false
airquality[, Q]
airquality
v1 <- c("a1","b2","c1","d2")
v2 <- c("g1","x2","d2","e2","f1","a1","c2","b2","a2")
match(v1,v2)
v1 %in% v2
g<- ggplot()
g<- ggplot2()
library(dplyr)
library(ggplot2)
library(nycflights13)
g<- ggplot()
g<- ggplot2()
x = 7
x >=5
y <- c(1,4,9)
sqrt(y)
y[ ]
y [, ]
c(1,2,3,4,5) *
c(1,2,3,4,5) *2
c(1,2,3,4,5)*2
1:3^2
Var*2
x <-2
2x<- 2*x
2x <- 2*x
2*x
x <- 2*x
sqrt4 <- sqrt(4)
sqrt4
a number <- 6
rep(1:3, 2)
:?
help(:)
help(":")
setwd("C:/Ran/Berkeley/IEOR/242/HW3")
library(dplyr)
library(ggplot2)
library(caTools) # splits
library(rpart) # CART
library(rpart.plot) # CART plotting
library(caret)
library(randomForest)
library(gbm)
library(ROCR)
df
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[[2]]
df[1, ]
df
df$x
x = C(1:10)
x = c(1:10)
head(x)
x(1:5)
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[[2]]
df[1, ]
df
df[df$height == 1.88]
df[df$height == 1.88, ]
df[, df$height == 1.88]
df#height
df#Height
df[df$Height == 1.88]
df[df$height == 1.88]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, c(1,2)]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, c(1,2)]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, c(1,-2)]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, c(1,(-2))]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, c(1,2)]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[0]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[[1]]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, c(1, lengtj(df))]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, c(1, length(df) - 1)]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, c('Luna', "Hayley", "female", 1981, "e"))
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", boern = 1982, spell = "e"))
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df(, c(4,1))
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df(:, c(4,1))
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df[, c(4,1)]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df[, c(5,1)]
var-name <- 3
var_name <-3
x' <- 3
quitq
quit()
quit
var <-3
''
d
q
seq(1,2, by = 0.1)
matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
matrix(1:12, nrow = 4, ncol = 2, byrow = TRUE)
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df[, c(5,1)]
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[[2]]
df[1, ]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df[, c(5,1)]
df[, df$born == 1980]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df[, c(5,1)]
df <- data.frame(first = c("Harry", "Hermione", "Ron"), last = c("Potter", "Granger", "Weasley"), gender = c("male", "female", "male"), born = c(1980, 1979, 1980), spell = c("s", "a", "r"))
df[1:3, 1&2]
df <- rbind(df, data.frame(first = "Luna", last = "Hayley", gender = "female", born = 1982, spell = "e"))
df[, c(5,1)]
df[, df$born == 1980]
is.nan("Hi")
is.NA("Hi")
is.na("Hi")
is.nan(0/0)
is.na(0/0)
is.nan(NA)
is.na(NA)
is.nan(NA)
is.na(NA)
# Vector
x <- c(2,4,6,7)
names (x) <- letters[1:4]
x[1]
x[c("b", "d")]
x[rep("a", 5)]
x[as.logical(c(0, 1, pi, -10))]
as.logical(0.5)
library(dplyr)
library(ggplot2)
library(nycflights13)
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp)
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp$last)
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp[last])
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp[[last]])
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp$courses)
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp[hp$courses = "Potions"])
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp[hp$courses == "Potions"])
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
#Tibbles never allow partial subsetting, and always return another tibble after subsetting:
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
df2$a
#Only values of length 1 are recycled in tibbles:
#tibble(a = 1:3, c = 1:2)
sw <- tibble(name = c("Anakin", "Padme", "Luke", "Leia"), gender = c("male", "female", "male", "female"), height = c(1.88, 1.65, 1.72, 1.5), weight = c(84, 45, 77, 49))
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
#Tibbles never allow partial subsetting, and always return another tibble after subsetting:
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
#df2$a
#Only values of length 1 are recycled in tibbles:
#tibble(a = 1:3, c = 1:2)
sw <- tibble(name = c("Anakin", "Padme", "Luke", "Leia"), gender = c("male", "female", "male", "female"), height = c(1.88, 1.65, 1.72, 1.5), weight = c(84, 45, 77, 49))
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
#Tibbles never allow partial subsetting, and always return another tibble after subsetting:
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
#df2$a
#Only values of length 1 are recycled in tibbles:
#tibble(a = 1:3, c = 1:2)
sw <- tibble(name = c("Anakin", "Padme", "Luke", "Leia"), gender = c("male", "female", "male", "female"), height = c(1.88, 1.65, 1.72, 1.5), weight = c(84, 45, 77, 49))
sw
library(dplyr)
library(ggplot2)
library(nycflights13)
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
#Tibbles never allow partial subsetting, and always return another tibble after subsetting:
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
#df2$a
#Only values of length 1 are recycled in tibbles:
#tibble(a = 1:3, c = 1:2)
sw <- tibble(name = c("Anakin", "Padme", "Luke", "Leia"), gender = c("male", "female", "male", "female"), height = c(1.88, 1.65, 1.72, 1.5), weight = c(84, 45, 77, 49))
sw %>% select(weight) %>% summarise(avg_weight = mean(weight), group_by(gender))
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
#Tibbles never allow partial subsetting, and always return another tibble after subsetting:
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
#df2$a
#Only values of length 1 are recycled in tibbles:
#tibble(a = 1:3, c = 1:2)
sw <- tibble(name = c("Anakin", "Padme", "Luke", "Leia"), gender = c("male", "female", "male", "female"), height = c(1.88, 1.65, 1.72, 1.5), weight = c(84, 45, 77, 49))
sw %>% select(weight) %>% summarise(avg_weight = mean(weight), group_by(sw$gender))
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[[2]]
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[2]
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[[2]]
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
df[[2]]
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[[2]]
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
df[2]
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
typeof(df[2])
typeof(df[[2]])
df <- data.frame(name = c("Anakin", "Padme", "Luke", "leia"), gender = c('male', 'femake', 'male', 'female'), height = c(1.88, 1.65, 1.82, 1.72))
attributes(df)
df
print(typeof(df[2]))
print(typeof(df[[2]]))
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
#Tibbles never allow partial subsetting, and always return another tibble after subsetting:
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
#df2$a
#Only values of length 1 are recycled in tibbles:
#tibble(a = 1:3, c = 1:2)
sw <- tibble(name = c("Anakin", "Padme", "Luke", "Leia"), gender = c("male", "female", "male", "female"), height = c(1.88, 1.65, 1.72, 1.5), weight = c(84, 45, 77, 49))
sw %>% select(weight) %>% summarise(avg_weight = mean(weight), group_by(sw, gender))
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
#Tibbles never allow partial subsetting, and always return another tibble after subsetting:
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
#df2$a
#Only values of length 1 are recycled in tibbles:
#tibble(a = 1:3, c = 1:2)
sw <- tibble(name = c("Anakin", "Padme", "Luke", "Leia"), gender = c("male", "female", "male", "female"), height = c(1.88, 1.65, 1.72, 1.5), weight = c(84, 45, 77, 49))
sw %>% select(weight) %>% summarise(group_by(sw, gender), avg_weight = mean(weight))
group_by(sw, gender)
summarise(group_by(sw, gender), avg_weight = mean(weight))
1:3^2
seq(0, 1, by = 0.1)
rep(1:4, 2)
rep(1:4, each = 2)
# Vector
x <- c(2,4,6,7)
names (x) <- letters[1:4]
x[1]
x[c("b", "d")]
x[rep("a", 5)]
x[as.logical(c(0, 1, pi, -10))]
as.logical(0.5)
rep(1:4, each = 2)
df <-  data.frame(color = c('blue', 'black', 'blue', 'blue', 'black'), value = 1:5)
filter(df, color == 'blue')
filter (df, color %in% 'blue')
select(df, color)
select(df, -color)
summarise(group_by(df, color), total = sum(value))
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(size = 3)
ggplot(faithful, aes(x = waiting)) + geom_histogram(binwidth = 30, color = 'black')
ggplot(iris, aes(Species, Sepal.Length)) + geom_bar(stat = "identity") #default is geom_bar(stat = "bin") for counts
#Explore ddply, llply, join, melt, dcast, acast
#Faceting
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + facet_grid(Species ~.) # along columns
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + facet_wrap(~Species)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(aes(shape = Species), size = 3) +
geom_smooth(method = "lm") #lm for linear fit
hp <- list(
first = 'Harry',
last = 'Potter',
courses = c('Potions', 'Enchantments', 'Spells'),
sport = 'quidditch',
age = 18L,
gpa = 3.9
)
typeof(hp[hp$courses == "Potions"])
length(hp[3])
length(hp[[3]])
x= C(1,3,4,5)
x= c(1,3,4,5)
x[5]
seq(from = 10, to = 1, by = 1.5)
seq(from = 10, to = 1, by = -1.5)
seq(from = 10, to = 1, by = -2.5)
x = c(1,2,3,4,5)
y = c("a", "b", "c", "d", "e")
y[x/x]
y[true, true, true, true, TRUE]
y[TRUE, TRUE, TRUE, TRUE, TRUE]
y[c(TRUE, TRUE, TRUE, TRUE, TRUE)]
y[x[-2][3]]
bacon = c(FALSE)
typeof(bacon^2)
library(boot)
library(ggplot2)
# bootstrap compatible mean function
sample_mean <- function(data, index) {
return(mean(data[index]))
}
# normal example
set.seed(314)
normal_data = rnorm(50, 4, 1.5)# 50 samples with mean 4 and sd 1.5
normal_data_df = data.frame(samples = normal_data)
set.seed(5359)
normal_boot = boot(normal_data, sample_mean, R = 1000)
normal_boot
normal_boot = boot(normal_data, sample_mean, R = 1000) #(B = 1000)
normal_boot
normal_boot_results = data.frame(mean_estimates = normal_boot$t)
ggplot(normal_data_df) + geom_histogram(aes(x = samples), binwidth = 0.4, color = "red") +
ylab("Count") + xlab("Data Observation") + theme_bw() +
theme(axis.title=element_text(size=18), axis.text=element_text(size=18))
ggplot(normal_boot_results) + geom_histogram(aes(x = mean_estimates), binwidth = 0.025, color = "blue") +
ylab("Count") + xlab("Mean Estimate") + theme_bw() +
theme(axis.title=element_text(size=18), axis.text=element_text(size=18))
ggplot(normal_data_df) + geom_histogram(aes(x = samples), binwidth = 0.4, color = "red") +
ylab("Count") + xlab("Data Observation") + theme_bw() +
theme(axis.title=element_text(size=18), axis.text=element_text(size=18))
ggplot(normal_boot_results) + geom_histogram(aes(x = mean_estimates), binwidth = 0.025, color = "blue") +
ylab("Count") + xlab("Mean Estimate") + theme_bw() +
theme(axis.title=element_text(size=18), axis.text=element_text(size=18))
mean_squared_error <- function(data, index) {
responses <- data$response[index]
predictions <- data$prediction[index]
MSE <- mean((responses - predictions)^2)
return(MSE)
}
mean_absolute_error <- function(data, index) {
responses <- data$response[index]
predictions <- data$prediction[index]
MAE <- mean(abs(responses - predictions))
return(MAE)
}
OS_R_squared <- function(data, index) {
responses <- data$response[index]
predictions <- data$prediction[index]
baseline <- data$baseline[index]
SSE <- sum((responses - predictions)^2)
SST <- sum((responses - baseline)^2)
r2 <- 1 - SSE/SST
return(r2)
}
all_metrics <- function(data, index) {
mse <- mean_squared_error(data, index)
mae <- mean_absolute_error(data, index)
OSR2 <- OS_R_squared(data, index)
return(c(mse, mae, OSR2))
}
###### Random Forests + Plots ######
RF_test_set = data.frame(response = test.ctr$CTR, prediction = pred.best.rf, baseline = mean(train.ctr$CTR))
# Load packages
library(tm)
library(SnowballC)
install.packages(c("tm", "Snowballc", "wordcloud"))
rm(list = ls())
ESP_3pt <- summarise(group_by(GSW_3pt, name, period), total = length(name), made = sum(shot_made_flag == 'shot_yes'), perc_made = made/total)
source('C:/Ran/Berkeley/IEOR/Stats 133/workout01/code/make-shots-data-script.R', echo=TRUE)
setwd("C:/Ran/Berkeley/IEOR/Stats 133/workout01/code")
# Add column to store names for each player:
iguodala$name <- "Andre Iguodala"
source('C:/Ran/Berkeley/IEOR/Stats 133/workout01/code/make-shots-data-script.R', echo=TRUE)
source('C:/Ran/Berkeley/IEOR/Stats 133/workout01/code/make-shot-charts-script.R', echo=TRUE)
